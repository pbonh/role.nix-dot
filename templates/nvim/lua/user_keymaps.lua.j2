-- Remap space as leader key
vim.api.nvim_set_keymap('', '<Space>', '<Nop>', { noremap = true, silent = true })
vim.g.mapleader = ' '
vim.g.maplocalleader = ' '

-- Enable Mapx/Which-Key
local m = require'mapx'.setup{ global = true, whichkey = true }

-- Enter Command Mode Mapping(Reassign Colon/Enter)
nnoremap("<CR>", ":", "Enter Commands")

-- WhichKey Mappings
-- nnoremap(",", "<Cmd>WhichKey<CR>", "silent", "WhichKey: Show Keymappings")

-- Split/Window Mappings
m.nname("<leader>w", "Split/Window")
-- nnoremap("<C-h>", "<C-w>h", "silent", "Split/Window: Move Left")
-- nnoremap("<C-j>", "<C-w>j", "silent", "Split/Window: Move Down")
-- nnoremap("<C-k>", "<C-w>k", "silent", "Split/Window: Move Up")
-- nnoremap("<C-l>", "<C-w>l", "silent", "Split/Window: Move Right")
nnoremap("<C-h>", "<cmd>lua require('smart-splits').move_cursor_left()<CR>", "silent", "Split/Window: Move Left")
nnoremap("<C-j>", "<cmd>lua require('smart-splits').move_cursor_down()<CR>", "silent", "Split/Window: Move Down")
nnoremap("<C-k>", "<cmd>lua require('smart-splits').move_cursor_up()<CR>", "silent", "Split/Window: Move Up")
nnoremap("<C-l>", "<cmd>lua require('smart-splits').move_cursor_right()<CR>", "silent", "Split/Window: Move Right")
-- nnoremap("<C-w>h", "<cmd>lua require('smart-splits').resize_left()<CR>", "silent", "Split/Window: Resize Left")
-- nnoremap("<C-w>j", "<cmd>lua require('smart-splits').resize_down()<CR>", "silent", "Split/Window: Resize Down")
-- nnoremap("<C-w>k", "<cmd>lua require('smart-splits').resize_up()<CR>", "silent", "Split/Window: Resize Up")
-- nnoremap("<C-w>l", "<cmd>lua require('smart-splits').resize_right()<CR>", "silent", "Split/Window: Resize Right")
-- nnoremap("<leader>ww", "<Cmd>WinShift<CR>", "silent", "WinShift: Enter WinShift Mode")
-- nnoremap("<leader>wh", "<Cmd>WinShift left<CR>", "silent", "WinShift: Shift Split/Window Left")
-- nnoremap("<leader>wj", "<Cmd>WinShift down<CR>", "silent", "WinShift: Shift Split/Window Down")
-- nnoremap("<leader>wk", "<Cmd>WinShift up<CR>", "silent", "WinShift: Shift Split/Window Up")
-- nnoremap("<leader>wl", "<Cmd>WinShift right<CR>", "silent", "WinShift: Shift Split/Window Right")

-- Terminal Mappings
vim.api.nvim_set_keymap('t', '<C-]>', '<C-\\><C-n> ', { noremap = true, silent = true })
vim.api.nvim_set_keymap('t', '<C-h>', '<C-\\><C-n><C-W>h ', { noremap = true, silent = true })
vim.api.nvim_set_keymap('t', '<C-j>', '<C-\\><C-n><C-W>j ', { noremap = true, silent = true })
vim.api.nvim_set_keymap('t', '<C-k>', '<C-\\><C-n><C-W>k ', { noremap = true, silent = true })
vim.api.nvim_set_keymap('t', '<C-l>', '<C-\\><C-n><C-W>l ', { noremap = true, silent = true })
-- tnoremap("<C-]>", "<C-\\><C-n>", "silent", "Terminal: Exit Insert Mode")
-- tnoremap("<C-h>", "<C-\\><C-n><C-W>h", "silent", "Terminal: Change Split Left")
-- tnoremap("<C-j>", "<C-\\><C-n><C-W>j", "silent", "Terminal: Change Split Down")
-- tnoremap("<C-k>", "<C-\\><C-n><C-W>k", "silent", "Terminal: Change Split Up")
-- tnoremap("<C-l>", "<C-\\><C-n><C-W>l", "silent", "Terminal: Change Split Right")

-- Search Mappings
nnoremap("n", "<Cmd>execute('normal! ' . v:count1 . 'n')<CR><Cmd>lua require('hlslens').start()<CR>", "silent", "HLSLens: Next Search Result")
nnoremap("N", "<Cmd>execute('normal! ' . v:count1 . 'N')<CR><Cmd>lua require('hlslens').start()<CR>", "silent", "HLSLens: Previous Search Result")
nnoremap("*", "*<Cmd>lua require('hlslens').start()<CR>", "HLSLens: Search Cursorword")
nnoremap("#", "#<Cmd>lua require('hlslens').start()<CR>", "HLSLens: Search Cursorword In Reverse")
nnoremap("g*", "g*<Cmd>lua require('hlslens').start()<CR>", "HLSLens: Search Nearest Cursorword")
nnoremap("g#", "g#<Cmd>lua require('hlslens').start()<CR>", "HLSLens: Search Nearest Cursorword In Reverse")
nnoremap("<C-]>", ":noh<CR>", "silent", "HLSLens: Clear Search Result")

-- Terminal Plugin Mappings
m.nname("<leader>s", "Term")
tnoremap("<C-/>", "<Cmd>ToggleTerm<CR>", "silent", "ToggleTerm: Toggle Terminal")
-- nnoremap("<C-s>", "<Cmd>FloatermNew<CR>", "silent", "Term: New Floaterm")
tnoremap("<C-b>", "<Cmd>FloatermPrev<CR>", "silent", "Term: Previous Floaterm")
tnoremap("<C-f>", "<Cmd>FloatermNext<CR>", "silent", "Term: Next Floaterm")
nnoremap("<leader>ss", "<Cmd>Floaterms<CR>", "silent", "Term: Select Floaterm")
nnoremap("<leader>sb", "<Cmd>Broot<CR>", "silent", "Floating Window: Broot")
nnoremap("<leader>sr", "<Cmd>lua require('fm-nvim').Ranger(vim.fn.expand('%:p:~:.:h'))<CR>", "silent", "Floating Window: Ranger(Local)")
nnoremap("<leader>sR", "<Cmd>Ranger<CR>", "silent", "Floating Window: Ranger(Project Root)")
nnoremap("<leader>s/", "<Cmd>2ToggleTerm<CR>", "silent", "ToggleTerm: Double Terminal")
nnoremap("<leader>st", "<Cmd>3ToggleTerm<CR>", "silent", "ToggleTerm: Triple Terminal")
nnoremap("<leader>sx", "<Cmd>ToggleTerm size=20 direction=horizontal<CR>", "silent", "ToggleTerm: Horizontal Terminal")
nnoremap("<leader>sv", "<Cmd>ToggleTerm size=80 direction=vertical<CR>", "silent", "ToggleTerm: Vertical Terminal")

-- Base Telescope Mappings
-- nnoremap(":", "<cmd>lua require('telescope.builtin').commands()<CR>", "silent", "Telescope: View Commands")
nnoremap("<leader>ff", "<cmd>lua require('telescope.builtin').find_files({previewer = false})<CR>", "silent", "Telescope: Find Files")
nnoremap("<leader>fb", "<cmd>lua require('telescope.builtin').buffers()<CR>", "silent", "Telescope: View Buffers")
nnoremap("<leader>fh", "<cmd>lua require('telescope.builtin').help_tags()<CR>", "silent", "Telescope: Help Tags")
nnoremap("<leader>ft", "<cmd>Telescope tele_tabby list<CR>", "silent", "Telescope: Search Tabs")
nnoremap("_", "<cmd>lua require('telescope.builtin').grep_string()<CR>", "silent", "Telescope: Grep String(Cursor Word)")
-- nnoremap("<leader>bt", "<cmd>lua require('telescope.builtin').tags{ only_current_buffer = true }<CR>", "silent", "Telescope: Search Buffer Tags")
nnoremap("<leader>Q", "<cmd>lua require('telescope.builtin').live_grep()<CR>", "silent", "Telescope: Live Grep Project")
nnoremap("<leader>q", "<cmd>lua require('telescope-custom').live_grep_in_folder()<CR>", "silent", "Telescope: Selective Live Grep Project")
nnoremap("<leader>/", "<cmd>lua require('telescope.builtin').current_buffer_fuzzy_find()<CR>", "silent", "Telescope: Find in Current Buffer")
nnoremap("<leader>?", "<cmd>lua require('telescope.builtin').oldfiles()<CR>", "silent", "Telescope: Old Files")

-- Git Mappings
m.nname("<leader>g", "Git")
nnoremap("<leader>gg", "<Cmd>Lazygit<CR>", "silent", "Git: Lazygit")
nnoremap("<leader>gb", "<Cmd>lua require('telescope.builtin').git_branches()<CR>", "silent", "Git: Pick Branch")
nnoremap("<leader>gl", "<Cmd>lua require('telescope.builtin').git_commits()<CR>", "silent", "Git: Pick Commit")
nnoremap("<leader>gc", "<Cmd>lua require('telescope.builtin').git_bcommits()<CR>", "silent", "Git: Pick Buffer Commit")
nnoremap("<leader>gs", "<Cmd>lua require('telescope.builtin').git_stash()<CR>", "silent", "Git: Show Stash")
nnoremap("<leader>gd", "<Cmd>DiffviewOpen<CR>", "silent", "Git: Show Diff")
nnoremap("<leader>gh", "<Cmd>DiffviewFileHistory .<CR>", "silent", "Git: Show Changed File History")

-- Extra Telescope Mappings
-- m.nname("<leader>t", "Telescope")
nnoremap("<leader>t", "<cmd>lua require('telescope').extensions.asynctasks.all()<CR>", "silent", "Telescope: Run Task")
m.nname("<leader>n", "Telescope Neorg")
nnoremap("<leader>nf", "<cmd>Telescope neorg find_linkable<CR>", "silent", { ft = "norg" }, "Telescope Neorg: Find Neorg Links")
nnoremap("<leader>n/", "<cmd>Telescope neorg search_headings<CR>", "silent", { ft = "norg" }, "Telescope Neorg: Search Neorg File Headings")
nnoremap("<leader>ni", "<cmd>Telescope neorg insert_link<CR>", "silent", { ft = "norg" }, "Telescope Neorg: Insert Neorg Links")
nnoremap("<leader>nl", "<cmd>Telescope neorg insert_file_link<CR>", "silent", { ft = "norg" }, "Telescope Neorg: Insert Neorg File Links")

-- Diagnostic Mappings
-- m.nname("<leader>e", "Diagnostic")
-- nnoremap("<leader>ee", "<cmd>lua vim.diagnostic.open_float()<CR>", "silent", "Diagnostic: Open Float")
-- nnoremap("<leader>el", "<cmd>lua vim.diagnostic.setloclist()<CR>", "silent", "Diagnostic: Set Location List")

-- LSP Mappings
m.nname("<leader>l", "LSP")
nnoremap("<leader>li", ":LspInfo<Cr>",    "LSP: Show LSP information")
nnoremap("<leader>lr", ":LspRestart<Cr>", "LSP: Restart LSP")
nnoremap("<leader>ls", ":LspStart<Cr>",   "LSP: Start LSP")
nnoremap("<leader>lS", ":LspStop<Cr>",    "LSP: Stop LSP")
nnoremap("gd", ":Definitions<Cr>", "silent", "LSP: Goto Definition")
nnoremap("gD", ":Declarations<CR>", "silent", "LSP: Goto Declaration")
nnoremap("gi", ":Implementations<CR>", "silent", "LSP: Goto Implementation")
nnoremap("<leader>D", ":TypeDefinitions<CR>", "silent", "LSP: Goto Type Definitions")
nnoremap("gr", ":References<CR>", "silent", "LSP: Find References")
nnoremap("g/", ":DocumentSymbols<CR>", "silent", "LSP: Find Document Symbols")
nnoremap("gS", ":WorkspaceSymbols<CR>", "silent", "LSP: Find Workspace Symbols")
nnoremap("gL", ":Diagnostics<CR>", "silent", "LSP: Show Buffer Diagnostics")
nnoremap("gG", ":DiagnosticsAll<CR>", "silent", "LSP: Show All Diagnostics")
nnoremap("<leader>gi", ":IncomingCalls<CR>", "silent", "LSP: Show Incoming Calls")
nnoremap("<leader>go", ":OutgoingCalls<CR>", "silent", "LSP: Show Outgoing Calls")
nnoremap("<leader>ca", ":CodeActions<CR>", "silent", "LSP: Code Actions")
nnoremap("<leader>cA", ":RangeCodeActions<CR>", "silent", "LSP: Range Code Actions")
-- nnoremap("gd", "<cmd>lua vim.lsp.buf.definition()<CR>", "silent", "LSP: Goto Definition")
-- nnoremap("gD", "<cmd>lua vim.lsp.buf.declaration()<Cr>", "silent", "LSP: Goto Declaration")
-- nnoremap("gi", "<cmd>lua vim.lsp.buf.implementation()<CR>", "silent", "LSP: Goto Implementation")
-- nnoremap("<leader>D", "<cmd>lua vim.lsp.buf.type_definition()<CR>", "silent", "LSP: Type Definition")
-- nnoremap("gr", "<cmd>lua vim.lsp.buf.references()<CR>", "silent", "LSP: Find References")
-- nnoremap("g/", "<cmd>lua require('telescope.builtin').lsp_document_symbols()<CR>", "silent", "LSP: Search Document Symbols")
-- nnoremap("gS", "<cmd>lua require('telescope.builtin').lsp_dynamic_workspace_symbols()<CR>", "silent", "LSP: Search Workspace Symbols")
-- nnoremap("[d", "<cmd>lua vim.diagnostic.goto_prev()<CR>", "silent", "Diagnostic: Goto Previous")
-- nnoremap("]d", "<cmd>lua vim.diagnostic.goto_next()<CR>", "silent", "Diagnostic: Goto Next")
-- nnoremap("K", "<cmd>lua vim.lsp.buf.hover()<CR>", "silent", "LSP: Hover")
-- nnoremap("<leader>K", "<cmd>lua vim.lsp.buf.signature_help()<CR>", "silent", "LSP: Signature Help")
-- nnoremap("<leader>wa", "<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>", "silent", "LSP: Add Workspace Folder")
-- nnoremap("<leader>wr", "<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>", "silent", "LSP: Remove Workspace Folder")
-- nnoremap("<leader>wl", "<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>", "silent", "LSP: List Workspace Folders")
-- nnoremap("<leader>rn", "<cmd>lua vim.lsp.buf.rename()<CR>", "silent", "LSP: Rename")
-- nnoremap("<leader>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>", "silent", "LSP: Code Action")

-- Telescope-Project Mappings
-- nnoremap("<leader>p", ":lua require'telescope'.extensions.project.project{}<CR>", "silent", "Telescope: Select Project")
nnoremap("<leader>p", "<Cmd>Telescope zoxide list<CR>", "silent", "Telescope: Select Project")

-- NvimTree Mappings
nnoremap("<leader>`", "<Cmd>NvimTreeToggle<CR>", "silent", "NvimTree: Toggle Tree")

-- Nvim Symbols Outline Mappings
nnoremap("<leader>S", "<Cmd>SymbolsOutline<CR>", "silent", "Symbol Outline: Toggle Outline")

--Remap for dealing with word wrap
vim.api.nvim_set_keymap('n', 'k', "v:count == 0 ? 'gk' : 'k'", { noremap = true, expr = true, silent = true })
vim.api.nvim_set_keymap('n', 'j', "v:count == 0 ? 'gj' : 'j'", { noremap = true, expr = true, silent = true })

-- Nvim-Dap-UI Mappings
m.nname("<leader>d", "DAP(Debug Adapter Protocol)")
nnoremap("<leader>db", "<cmd>lua require'dap'.toggle_breakpoint()<CR>", "silent", "DAP: Toggle Breakpoint")
nnoremap("<leader>dc", "<cmd>lua require'dap'.continue()<CR>", "silent", "DAP: Continue")
nnoremap("<leader>dv", "<cmd>lua require'dap'.step_over()<CR>", "silent", "DAP: Step Over")
nnoremap("<leader>di", "<cmd>lua require'dap'.step_into()<CR>", "silent", "DAP: Step Into")
nnoremap("<leader>do", "<cmd>lua require'dap'.step_out()<CR>", "silent", "DAP: Step Out")
nnoremap("<leader>dr", "<cmd>lua require'dap'.repl.open()<CR>", "silent", "DAP: Open REPL")
nnoremap("<leader>dd", "<cmd>lua require('dapui').toggle()<CR>", "silent", "DAP-UI: Toggle Debugger")
nnoremap("<leader>dt", "<cmd>Telescope dap commands<CR>", "silent", "DAP: Telescope List DAP Commands")
nnoremap("<leader>dl", "<cmd>Telescope dap list_breakpoints<CR>", "silent", "DAP: Telescope List DAP Breakpoints")
-- nnoremap("<leader>do", "<cmd>lua require('dapui').open()<CR>", "silent", "DAP-UI: Open Debugger")
-- nnoremap("<leader>dx", "<cmd>lua require('dapui').close()<CR>", "silent", "DAP-UI: Close Debugger")
nnoremap("<F5>", "<cmd>lua require'dap'.continue()<CR>", "silent", "DAP: Continue")
nnoremap("<F10>", "<cmd>lua require'dap'.step_over()<CR>", "silent", "DAP: Step Over")
nnoremap("<F11>", "<cmd>lua require'dap'.step_into()<CR>", "silent", "DAP: Step Into")
nnoremap("<F12>", "<cmd>lua require'dap'.step_out()<CR>", "silent", "DAP: Step Out")

-- Refactoring.nvim Mappings
m.nname("<leader>r", "Refactoring")
-- Remaps for the refactoring operations currently offered by the plugin
vnoremap("<leader>re", [[ <Esc><Cmd>lua require('refactoring').refactor('Extract Function')<CR>]], {noremap = true, silent = true, expr = false})
vnoremap("<leader>rf", [[ <Esc><Cmd>lua require('refactoring').refactor('Extract Function To File')<CR>]], {noremap = true, silent = true, expr = false})
vnoremap("<leader>rv", [[ <Esc><Cmd>lua require('refactoring').refactor('Extract Variable')<CR>]], {noremap = true, silent = true, expr = false})
vnoremap("<leader>ri", [[ <Esc><Cmd>lua require('refactoring').refactor('Inline Variable')<CR>]], {noremap = true, silent = true, expr = false})
-- prompt for a refactor to apply when the remap is triggered
vnoremap(
    "<leader>rr",
    ":lua require('refactoring').select_refactor()<CR>",
    { noremap = true, silent = true, expr = false }
)
-- Extract block doesn't need visual mode
nnoremap("<leader>rb", [[ <Cmd>lua require('refactoring').refactor('Extract Block')<CR>]], {noremap = true, silent = true, expr = false})
nnoremap("<leader>rbf", [[ <Cmd>lua require('refactoring').refactor('Extract Block To File')<CR>]], {noremap = true, silent = true, expr = false})
-- Inline variable can also pick up the identifier currently under the cursor without visual mode
nnoremap("<leader>ri", [[ <Cmd>lua require('refactoring').refactor('Inline Variable')<CR>]], {noremap = true, silent = true, expr = false})
-- You can also use below = true here to to change the position of the printf
-- statement (or set two remaps for either one). This remap must be made in normal mode.
nnoremap(
	"<leader>rp",
	":lua require('refactoring').debug.printf({below = false})<CR>",
	{ noremap = true }
)
-- Remap in normal mode and passing { normal = true } will automatically find the variable under the cursor and print it
nnoremap("<leader>rv", ":lua require('refactoring').debug.print_var({ normal = true })<CR>", { noremap = true })
-- Remap in visual mode will print whatever is in the visual selection
vnoremap("<leader>rv", ":lua require('refactoring').debug.print_var({})<CR>", { noremap = true })
-- Cleanup function: this remap should be made in normal mode
nnoremap("<leader>rc", ":lua require('refactoring').debug.cleanup({})<CR>", { noremap = true })

-- Overseer Plugin Mappings
-- m.nname("<leader>o", "Overseer")
-- nnoremap("<leader>oo", ":OverseerToggle<CR>", "Overseer: Toggle")
-- nnoremap("<leader>or", ":OverseerRun<CR>", "Overseer: Run")
-- nnoremap("<leader>ot", ":OverseerTaskAction<CR>", "Overseer: Task Action")

-- Language-Specific Mappings
{{ extra_nvim_language_mappings_file or "-- No Language Specific Mappings Configured" }}
