-- local Hydra = require('hydra')
-- local hint = [[
--  ^^^^^^     Move     ^^^^^^   ^^    Size   ^^   ^^     Split
--  ^^^^^^--------------^^^^^^   ^^-----------^^   ^^---------------
--  ^ ^ _k_ ^ ^   ^ ^ _K_ ^ ^    ^   _<C-k>_   ^   _s_: horizontally
--  _h_ ^ ^ _l_   _H_ ^ ^ _L_    _<C-h>_ _<C-l>_   _v_: vertically
--  ^ ^ _j_ ^ ^   ^ ^ _J_ ^ ^    ^   _<C-j>_   ^   _q_: close
--  focus^^^^^^   window^^^^^^   ^_=_: equalize    ^ ^
--  ^ ^ ^ ^ ^ ^   ^ ^ ^ ^ ^ ^    ^^ ^          ^   _b_: choose buffer 
-- ]]
-- 
-- Hydra({
--    name = 'WINDOWS',
--    hint = hint,
--    config = {
--       timeout = 4000,
--       hint = {
--          border = 'rounded',
--          position = 'middle'
--       },
--       invoke_on_body = true,
--    },
--    mode = 'n',
--    body = '<C-w>',
--    heads = {
--       -- { 'h', '<C-w>h' },
--       -- { 'j', '<C-w>j' },
--       -- { 'k', [[<cmd>try | wincmd k | catch /^Vim\%((\a\+)\)\=:E11:/ | close | endtry<CR>]] },
--       -- { 'l', '<C-w>l' },
--       { 'h', '<Cmd>lua require("smart-splits").move_cursor_left()<CR>' },
--       { 'j', '<Cmd>lua require("smart-splits").move_cursor_down()<CR>' },
--       { 'k', '<Cmd>lua require("smart-splits").move_cursor_up()<CR>' },
--       { 'l', '<Cmd>lua require("smart-splits").move_cursor_right()<CR>' },
-- 
--       { 'H', '<Cmd>WinShift left<CR>' },
--       { 'J', '<Cmd>WinShift down<CR>' },
--       { 'K', '<Cmd>WinShift up<CR>' },
--       { 'L', '<Cmd>WinShift right<CR>' },
-- 
--       { 's', '<C-w>s' },
--       { 'v', '<C-w>v' },
-- 
--       { '<C-h>', '<Cmd>lua require("smart-splits").resize_left()<CR>' },
--       { '<C-j>', '<Cmd>lua require("smart-splits").resize_down()<CR>' },
--       { '<C-k>', '<Cmd>lua require("smart-splits").resize_up()<CR>' },
--       { '<C-l>', '<Cmd>lua require("smart-splits").resize_right()<CR>' },
--       { '=', '<C-w>=', { desc = 'equalize'} },
-- 
--       { 'b', '<Cmd>BufExplorer<CR>', { exit = true, desc = 'choose buffer' } },
--       { 'q', [[<Cmd>try | close | catch /^Vim\%((\a\+)\)\=:E444:/ | endtry<CR>]],
--                                                      { desc = 'close window' } },
--       { '<Esc>', nil,  { exit = true, desc = false }},
--       { '<C-[>', nil,  { exit = true, desc = false }},
--    }
-- })

require("winshift").setup({
  highlight_moving_win = true,  -- Highlight the window being moved
  focused_hl_group = "Visual",  -- The highlight group used for the moving window
  moving_win_options = {
    -- These are local options applied to the moving window while it's
    -- being moved. They are unset when you leave Win-Move mode.
    wrap = false,
    cursorline = false,
    cursorcolumn = false,
    colorcolumn = "",
  },
  window_picker = function()
    return require("winshift.lib").pick_window({
      -- A string of chars used as identifiers by the window picker.
      picker_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
      filter_rules = {
        -- This table allows you to indicate to the window picker that a window
        -- should be ignored if its buffer matches any of the following criteria.
        cur_win = true, -- Filter out the current window
        floats = true,  -- Filter out floating windows
        filetype = {   -- List of ignored buftypes
          "NvimTree",
        },  -- List of ignored file types
        buftype = {
          "terminal",
          "quickfix",
        },   -- List of ignored buftypes
        bufname = {},   -- List of vim regex patterns matching ignored buffer names
      },
      ---A function used to filter the list of selectable windows.
      ---@param winids integer[] # The list of selectable window IDs.
      ---@return integer[] filtered # The filtered list of window IDs.
      filter_func = nil,
    })
  end,
})

local Hydra = require('hydra')
local splits = require('smart-splits')

local cmd = require('hydra.keymap-util').cmd
local pcmd = require('hydra.keymap-util').pcmd

-- barbar.nvim config
-- local buffer_hydra = Hydra({
--    name = 'Barbar',
--    config = {
--       on_key = function()
--          -- Preserve animation
--          vim.wait(200, function() vim.cmd 'redraw' end, 30, false)
--       end
--    },
--    heads = {
--       { 'h', function() vim.cmd('BufferPrevious') end, { on_key = false } },
--       { 'l', function() vim.cmd('BufferNext') end, { desc = 'choose', on_key = false } },
-- 
--       { 'H', function() vim.cmd('BufferMovePrevious') end },
--       { 'L', function() vim.cmd('BufferMoveNext') end, { desc = 'move' } },
-- 
--       { 'p', function() vim.cmd('BufferPin') end, { desc = 'pin' } },
-- 
--       { 'd', function() vim.cmd('BufferClose') end, { desc = 'close' } },
--       { 'c', function() vim.cmd('BufferClose') end, { desc = false } },
--       { 'q', function() vim.cmd('BufferClose') end, { desc = false } },
-- 
--       { 'od', function() vim.cmd('BufferOrderByDirectory') end, { desc = 'by directory' } },
--       { 'ol', function() vim.cmd('BufferOrderByLanguage') end,  { desc = 'by language' } },
--       { '<Esc>', nil, { exit = true } }
--    }
-- })
-- 
-- local function choose_buffer()
--    if #vim.fn.getbufinfo({ buflisted = true }) > 1 then
--       buffer_hydra:activate()
--    end
-- end
-- 
-- vim.keymap.set('n', 'gb', choose_buffer)

local window_hint = [[
 ^^^^^^^^^^^^     Move      ^^    Size   ^^   ^^     Split
 ^^^^^^^^^^^^-------------  ^^-----------^^   ^^---------------
 ^ ^ _k_ ^ ^  ^ ^ _K_ ^ ^   ^   _<C-k>_   ^   _s_: horizontally 
 _h_ ^ ^ _l_  _H_ ^ ^ _L_   _<C-h>_ _<C-l>_   _v_: vertically
 ^ ^ _j_ ^ ^  ^ ^ _J_ ^ ^   ^   _<C-j>_   ^   _q_, _c_: close
 focus^^^^^^  window^^^^^^  ^_=_: equalize^   _z_: maximize
 ^ ^ ^ ^ ^ ^  ^ ^ ^ ^ ^ ^   ^^ ^          ^   _o_: remain only
 _b_: choose buffer
]]

Hydra({
   name = 'Windows',
   hint = window_hint,
   config = {
      invoke_on_body = true,
      hint = {
         border = 'rounded',
         offset = -1
      }
   },
   mode = 'n',
   body = '<C-w>',
   heads = {
      { 'h', function() splits.move_cursor_left() end },
      { 'j', function() splits.move_cursor_down() end },
      { 'k', function() splits.move_cursor_up() end },
      { 'l', function() splits.move_cursor_right() end },

      { 'H', cmd 'WinShift left' },
      { 'J', cmd 'WinShift down' },
      { 'K', cmd 'WinShift up' },
      { 'L', cmd 'WinShift right' },

      { '<C-h>', function() splits.resize_left(2)  end },
      { '<C-j>', function() splits.resize_down(2)  end },
      { '<C-k>', function() splits.resize_up(2)    end },
      { '<C-l>', function() splits.resize_right(2) end },
      { '=', '<C-w>=', { desc = 'equalize'} },

      { 's',     pcmd('split', 'E36') },
      { '<C-s>', pcmd('split', 'E36'), { desc = false } },
      { 'v',     pcmd('vsplit', 'E36') },
      { '<C-v>', pcmd('vsplit', 'E36'), { desc = false } },

      { 'w',     '<C-w>w', { exit = true, desc = false } },
      { '<C-w>', '<C-w>w', { exit = true, desc = false } },

      { 'z',     cmd 'MaximizerToggle!', { desc = 'maximize' } },
      { '<C-z>', cmd 'MaximizerToggle!', { exit = true, desc = false } },

      { 'o',     '<C-w>o', { exit = true, desc = 'remain only' } },
      { '<C-o>', '<C-w>o', { exit = true, desc = false } },

      -- { 'b', choose_buffer, { exit = true, desc = 'choose buffer' } },

      { 'c',     pcmd('close', 'E444') },
      { 'q',     pcmd('close', 'E444'), { desc = 'close window' } },
      { '<C-c>', pcmd('close', 'E444'), { desc = false } },
      { '<C-q>', pcmd('close', 'E444'), { desc = false } },

      { '<Esc>', nil,  { exit = true, desc = false }}
   }
})
