local lspconfig = require('lspconfig')
local on_attach = function(_, bufnr)
  vim.cmd [[ command! Format execute 'lua vim.lsp.buf.formatting()' ]]
end

-- nvim-cmp supports additional completion capabilities
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').update_capabilities(capabilities)

-- Enable the following language servers
local servers = {
  'ansiblels',
  'bashls',
  {{ lsp_providers_file or "-- No Additional Servers Preconfigured" }}
}

for _, lsp in ipairs(servers) do
  lspconfig[lsp].setup {
    on_attach = on_attach,
    capabilities = capabilities,
  }
end
{{ lsp_provider_lspconfig_setup_file or "-- No Extra Lsp Providers Installed" }}

lspconfig['sumneko_lua'].setup {
  on_attach = on_attach,
  capabilities = capabilities,
  settings = {
    Lua = {
      runtime = {
        -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
        version = 'LuaJIT',
        -- Setup your lua path
        path = runtime_path,
      },
      diagnostics = {
        -- Get the language server to recognize the `vim` global
        globals = { 'vim' },
      },
      workspace = {
        -- Make the server aware of Neovim runtime files
        library = vim.api.nvim_get_runtime_file('', true),
      },
      -- Do not send telemetry data containing a randomized but unique identifier
      telemetry = {
        enable = false,
      },
    },
  },
}

-- FZF/LSP Settings
require'fzf_lsp'.setup()

-- require'navigator'.setup({
--   default_mapping = false,
--   keymaps = {
--     { key = 'gD', func = "require('navigator.definition').definition()" },
--     { key = 'gd', func = "declaration({ border = 'rounded', max_width = 80 })" },
--     { key = '<Space>D', func = 'type_definition()' },
--     { key = 'gp', func = "require('navigator.definition').definition_preview()" },
--     { key = 'gi', func = 'implementation()' },
--     { key = 'gs', func = "require('navigator.symbols').document_symbols()" },
--     { key = 'gS', func = "require('navigator.workspace').workspace_symbol()" },
--     { key = 'gr', func = "require('navigator.reference').reference()" },
--     { key = 'gR', func = "require('navigator.reference').async_ref()" },
--     { key = 'K', func = 'hover({ popup_opts = { border = single, max_width = 80 }})' },
--     { key = '<Leader>k', func = "require('navigator.dochighlight').hi_symbol()" },
--     { key = '<Leader>K', func = 'signature_help()' },
--     { mode = 'i', key = '<M-k>', func = 'signature_help()' },
--     { key = '<Leader>gt', func = "require('navigator.treesitter').buf_ts()" },
--     { key = '<Leader>gT', func = "require('navigator.treesitter').bufs_ts()" },
--     { key = '<Space>ca', mode = 'n', func = "require('navigator.codeAction').code_action()" },
--     { key = '<Space>cA', mode = 'v', func = 'range_code_action()' },
--     { key = '<Space>rn', func = "require('navigator.rename').rename()" },
--     { key = '<Leader>gi', func = 'incoming_calls()' },
--     { key = '<Leader>go', func = 'outgoing_calls()' },
--     { key = 'gG', func = "require('navigator.diagnostics').show_diagnostics()" },
--     { key = 'gL', func = "require('navigator.diagnostics').show_buf_diagnostics()" },
--     { key = '<Leader>dt', func = "require('navigator.diagnostics').toggle_diagnostics()" },
--     { key = ']d', func = "diagnostic.goto_next({ border = 'rounded', max_width = 80})" },
--     { key = '[d', func = "diagnostic.goto_prev({ border = 'rounded', max_width = 80})" },
--     { key = ']r', func = "require('navigator.treesitter').goto_next_usage()" },
--     { key = '[r', func = "require('navigator.treesitter').goto_previous_usage()" },
--     { key = '<Space>lf', func = 'formatting()', mode = 'n' },
--     { key = '<Space>lf', func = 'range_formatting()', mode = 'v' },
--     { key = '<Space>la', func = "require('navigator.workspace').add_workspace_folder()" },
--     { key = '<Space>lr', func = "require('navigator.workspace').remove_workspace_folder()" },
--     { key = '<Space>lw', func = "require('navigator.workspace').list_workspace_folders()" },
--     { key = '<Space>lc', mode = 'n', func = "require('navigator.codelens').run_action()" },
--   },
--   treesitter_analysis = true,
-- })
