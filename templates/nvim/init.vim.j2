" Python Host Version
let g:python3_host_prog="{{ nix_bin }}/nvim-python3"
" VTE Workaround
"set guicursor=
" Plugins ---------------------------------------------------------------------
call plug#begin('{{ nvim_plugged_dir }}')
  " Motion/Text Objects -------------------------------------------------------
  " Plug 'machakann/vim-sandwich'
  Plug 'tpope/vim-surround'
  Plug 'justinmk/vim-sneak'
  " Plug 'rhysd/clever-f.vim'
  " Theme ---------------------------------------------------------------------
  Plug 'morhetz/gruvbox'
  " Needed Before Devicons ----------------------------------------------------
  Plug 'mhinz/vim-startify'
  Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
  " ---------------------------------------------------------------------------
  Plug 'ryanoasis/vim-devicons'
  " ---------------------------------------------------------------------------
  Plug 'nvim-treesitter/nvim-treesitter', { 'branch': '0.5-compat', 'do': ':TSUpdate' }
  Plug 'nvim-neorg/neorg' | Plug 'nvim-lua/plenary.nvim'
  Plug 'tpope/vim-dispatch' | Plug 'radenling/vim-dispatch-neovim'
  Plug 'jeffkreeftmeijer/vim-numbertoggle'
  Plug 'juneedahamed/vc.vim'
  Plug 'haya14busa/is.vim'
  " Plug 'unblevable/quick-scope'
  " Plug 'ripxorip/aerojump.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'caenrique/nvim-maximize-window-toggle'
  Plug 'vimlab/split-term.vim'
  Plug 'jmckiern/vim-venter'
  Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
  Plug 'skywind3000/asynctasks.vim'
  Plug 'skywind3000/asyncrun.vim'
  Plug 'skywind3000/asyncrun.extra'
  Plug 'mhinz/vim-signify'
  Plug 'kevinhwang91/rnvimr'
  " Split UI ------------------------------------------------------------------
  "Plug 'Iron-E/vim-libmodal'
  "Plug 'Iron-E/nvim-libmodal'
  "Plug 'Iron-E/nvim-tabmode'
  "Plug 'simeji/winresizer'
  "Plug 'yaronkh/vim-winmanip'
  " Selection UI --------------------------------------------------------------
  "Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'voldikss/fzf-floaterm'
  Plug 'voldikss/vim-floaterm'
  "Plug 'yuki-ycino/fzf-preview.vim'
  "Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary' }
  "Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }
  " Syntax Highlighting -------------------------------------------------------
  Plug 'vim-scripts/bnf.vim'
  Plug 'vim-scripts/ebnf.vim'
  " Unit Testing --------------------------------------------------------------
  " Plug 'janko/vim-test'
  " Ansible -------------------------------------------------------------------
  Plug 'pearofducks/ansible-vim'
  " Language Server Protocol --------------------------------------------------
  Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
  Plug 'liuchengxu/vista.vim'
  Plug 'antoinemadec/coc-fzf'
  " Language Server Protocol Providers ----------------------------------------
  " Language Server Protocol Providers(End) -----------------------------------
call plug#end()
" Plugins(End) ----------------------------------------------------------------

" General ---------------------------------------------------------------------
" System Settings  ------------------------------------------------------------
   set hidden
   set noshowmode
   set noswapfile
   set wildmenu
"  set laststatus=2
"  set showtabline=2
"  set wildmode=longest:full,full
"  set nobackup
"  set timeoutlen=1000 ttimeoutlen=100
   set nomodeline
" Display  --------------------------------------------------------------------
  syn match   myTodo   contained   "\<\(TODO\|FIXME\):"
  hi def link myTodo Todo
" Tabs
" set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
  set tabstop=4 softtabstop=4 expandtab shiftwidth=4 smarttab
" Show `▸▸` for tabs: 	, `·` for tailing whitespace:
  set list listchars=tab:▸▸,trail:·
" Enable mouse mode
  set mouse=a
  set nowrap
  set formatoptions-=t " do not automatically wrap text when typing
" Use the system clipboard
  set clipboard+=unnamedplus
" Use a color column on the 80-character mark
  set colorcolumn=80
" Text Width
  set textwidth=100
" colorscheme gruvbox
" Search  ---------------------------------------------------------------------
set ignorecase smartcase
" Cursor  ---------------------------------------------------------------------
set cursorline cursorcolumn
" Line Numbers  ---------------------------------------------------------------
set number relativenumber
"augroup numbertoggle
"  autocmd!
"  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
"  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
"augroup END
" Terminal Settings  ----------------------------------------------------------
  "command! -bar StartTerminal terminal<cr>
  "nnoremap <C-t> :StartTerminal|startinsert
  "nnoremap <C-t> :Tnew<cr>
" Allow hitting $Command$ to switch to normal mode
  tnoremap <C-]> <C-\><C-n>
  "tnoremap <C-b> <C-\><C-n>:Buffers<cr>
  "tnoremap <C-f> <C-\><C-n>:Files<cr>
  "tnoremap <BS> <C-\><C-n><C-w>h
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-w>h <C-\><C-n><C-w><C-h>
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-w>j <C-\><C-n><C-w><C-j>
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-w>k <C-\><C-n><C-w><C-k>
  tnoremap <C-l> <C-\><C-n><C-w>l
  tnoremap <C-w>l <C-\><C-n><C-w><C-l>
  "au BufEnter 'term://*' startinsert
  set shell={{ nvim_shell }}
  augroup TerminalStuff
      au!
      autocmd TermOpen * setlocal nonumber norelativenumber
      autocmd BufWinEnter,WinEnter term://* startinsert
  augroup END
" Split Settings  -------------------------------------------------------------
  set splitright
  set splitbelow
" map <BS> <C-w>h
" map <C-h> <BS>
  nnoremap <C-j> <C-w>j
  xnoremap <C-j> <C-w>j
  nnoremap <C-w>j <C-w>J
  xnoremap <C-w>j <C-w>J
  nnoremap <C-k> <C-w>k
  xnoremap <C-k> <C-w>k
  nnoremap <C-w>k <C-w>K
  xnoremap <C-w>k <C-w>K
  nnoremap <C-h> <C-w>h
  xnoremap <C-h> <C-w>h
  nnoremap <C-w>h <C-w>H
  xnoremap <C-w>h <C-w>H
  nnoremap <C-l> <C-w>l
  xnoremap <C-l> <C-w>l
  nnoremap <C-w>l <C-w>L
  xnoremap <C-w>l <C-w>L
" Misc Functions  -------------------------------------------------------------
  vnoremap J :m '>+1<CR>gv=gv
  vnoremap K :m '<-2<CR>gv=gv
  command! ReloadVimrc :source $MYVIMRC
" function! s:show_position()
"       return ":\<c-u>echo 'start=" . string(getpos("v")) . " end=" . string(getpos(".")) . "'\<cr>gv"
" endfunction
" vmap <expr> ;j s:show_position()
" Leader/Command Functions  ---------------------------------------------------
  nnoremap <cr> :
  map <Space> <leader>
" nnoremap <SPACE> <Nop>
" let mapleader=" "
" General(End) ----------------------------------------------------------------

" Plugin Settings -------------------------------------------------------------
  for f in split(glob('{{ nvim_plugin_config_dir }}/*.vimrc'), '\n')
    exe 'source' f
  endfor
" Plugin Settings(End) --------------------------------------------------------
