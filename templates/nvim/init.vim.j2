" Python Host Version
let g:python3_host_prog="{{ nix_bin }}/nvim-python3"
"let g:loaded_node_provider=1
"let g:node_host_prog="{{ nix_bin }}/neovim-node-host"
let g:ale_disable_lsp = 1
" VTE Workaround
"set guicursor=
" Plugins ---------------------------------------------------------------------
call plug#begin('{{ nvim_plugged_dir }}')
  " Treesitter ----------------------------------------------------------------
  Plug 'nvim-treesitter/nvim-treesitter', { 'branch': '0.5-compat', 'do': ':TSUpdate' }
  " Motion/Text Objects -------------------------------------------------------
  " Plug 'machakann/vim-sandwich'
  Plug 'tpope/vim-surround'
  Plug 'justinmk/vim-sneak'
  " Plug 'rhysd/clever-f.vim'
  " Theme ---------------------------------------------------------------------
  Plug 'morhetz/gruvbox'
  " Needed Before Devicons ----------------------------------------------------
  Plug 'mhinz/vim-startify'
  Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
  " ---------------------------------------------------------------------------
  Plug 'ryanoasis/vim-devicons'
  " ---------------------------------------------------------------------------
  Plug 'rbgrouleff/bclose.vim'
  Plug 'skyuplam/broot.nvim'
  Plug 'kevinhwang91/rnvimr'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-neorg/neorg'
  Plug 'sbdchd/neoformat'
  Plug 'dense-analysis/ale'
  Plug 'tpope/vim-dispatch' | Plug 'radenling/vim-dispatch-neovim'
  Plug 'jeffkreeftmeijer/vim-numbertoggle'
  Plug 'juneedahamed/vc.vim'
  Plug 'haya14busa/is.vim'
  " Plug 'unblevable/quick-scope'
  " Plug 'ripxorip/aerojump.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'caenrique/nvim-maximize-window-toggle'
  Plug 'vimlab/split-term.vim'
  Plug 'jmckiern/vim-venter'
  Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
  Plug 'skywind3000/asynctasks.vim'
  Plug 'skywind3000/asyncrun.vim'
  Plug 'skywind3000/asyncrun.extra'
  Plug 'mhinz/vim-signify'
  " Split UI ------------------------------------------------------------------
  "Plug 'Iron-E/vim-libmodal'
  "Plug 'Iron-E/nvim-libmodal'
  "Plug 'Iron-E/nvim-tabmode'
  "Plug 'simeji/winresizer'
  "Plug 'yaronkh/vim-winmanip'
  " Selection UI --------------------------------------------------------------
  Plug 'nvim-telescope/telescope.nvim'
  "Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'yuki-yano/fzf-preview.vim', { 'branch': 'release/rpc' }
  Plug 'voldikss/fzf-floaterm'
  Plug 'voldikss/vim-floaterm'
  " Syntax Highlighting -------------------------------------------------------
  Plug 'vim-scripts/bnf.vim'
  Plug 'vim-scripts/ebnf.vim'
  " Unit Testing --------------------------------------------------------------
  " Plug 'janko/vim-test'
  " Ansible -------------------------------------------------------------------
  Plug 'pearofducks/ansible-vim'
  " Language Server Protocol --------------------------------------------------
  Plug 'neoclide/coc.nvim', {'do': '{{ nix_bin }}/yarn install --frozen-lockfile'}
  "Plug 'fannheyward/telescope-coc.nvim'
  Plug 'liuchengxu/vista.vim'
  Plug 'antoinemadec/coc-fzf'
  " DAP(Debug Adapter Protocol) Debugger --------------------------------------
  Plug 'mfussenegger/nvim-dap'
  " Language Server Protocol Providers ----------------------------------------
  " Language Server Protocol Providers(End) -----------------------------------
call plug#end()
" Plugins(End) ----------------------------------------------------------------

" General ---------------------------------------------------------------------
" System Settings  ------------------------------------------------------------
   set hidden
   set noshowmode
   set noswapfile
   set wildmenu
"  set laststatus=2
"  set showtabline=2
"  set wildmode=longest:full,full
"  set nobackup
"  set timeoutlen=1000 ttimeoutlen=100
   set nomodeline
" Display  --------------------------------------------------------------------
  syn match   myTodo   contained   "\<\(TODO\|FIXME\):"
  hi def link myTodo Todo
" Tabs
" set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
  set tabstop=4 softtabstop=4 expandtab shiftwidth=4 smarttab
" Show `▸▸` for tabs: 	, `·` for tailing whitespace:
  set list listchars=tab:▸▸,trail:·
" Enable mouse mode
  set mouse=a
  set nowrap
  set formatoptions-=t " do not automatically wrap text when typing
" Use the system clipboard
  set clipboard+=unnamedplus
" Use a color column on the 80-character mark
  set colorcolumn=80
" Text Width
  set textwidth=100
" colorscheme gruvbox
" Search  ---------------------------------------------------------------------
set ignorecase smartcase
" Cursor  ---------------------------------------------------------------------
set cursorline
" Line Numbers  ---------------------------------------------------------------
set number relativenumber
"augroup numbertoggle
"  autocmd!
"  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
"  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
"augroup END
" Terminal Settings  ----------------------------------------------------------
  set termguicolors
" if $TERM =~ '^\(rxvt\|screen\|interix\|putty\)\(-.*\)\?$'
"     set notermguicolors
" elseif $TERM =~ '^\(tmux\|iterm\|vte\|gnome\)\(-.*\)\?$'
"     set termguicolors
" elseif $TERM =~ '^\(xterm\)\(-.*\)\?$'
"     if $XTERM_VERSION != ''
"         set termguicolors
"     elseif $KONSOLE_PROFILE_NAME != ''
"         set termguicolors
"     elseif $VTE_VERSION != ''
"         set termguicolors
"     else
"         set notermguicolors
"     endif
" endif
  "command! -bar StartTerminal terminal<cr>
  "nnoremap <C-t> :StartTerminal|startinsert
  "nnoremap <C-t> :Tnew<cr>
" Allow hitting $Command$ to switch to normal mode
  tnoremap <C-]> <C-\><C-n>
  "tnoremap <C-b> <C-\><C-n>:Buffers<cr>
  "tnoremap <C-f> <C-\><C-n>:Files<cr>
  "tnoremap <BS> <C-\><C-n><C-w>h
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-w>h <C-\><C-n><C-w><C-h>
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-w>j <C-\><C-n><C-w><C-j>
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-w>k <C-\><C-n><C-w><C-k>
  tnoremap <C-l> <C-\><C-n><C-w>l
  tnoremap <C-w>l <C-\><C-n><C-w><C-l>
  "au BufEnter 'term://*' startinsert
  set shell={{ nvim_shell }}
  augroup TerminalStuff
      au!
      autocmd TermOpen * setlocal nonumber norelativenumber
      autocmd BufWinEnter,WinEnter term://* startinsert
  augroup END
" Split Settings  -------------------------------------------------------------
  set splitright
  set splitbelow
" map <BS> <C-w>h
" map <C-h> <BS>
  nnoremap <C-j> <C-w>j
  xnoremap <C-j> <C-w>j
  nnoremap <C-w>j <C-w>J
  xnoremap <C-w>j <C-w>J
  nnoremap <C-k> <C-w>k
  xnoremap <C-k> <C-w>k
  nnoremap <C-w>k <C-w>K
  xnoremap <C-w>k <C-w>K
  nnoremap <C-h> <C-w>h
  xnoremap <C-h> <C-w>h
  nnoremap <C-w>h <C-w>H
  xnoremap <C-w>h <C-w>H
  nnoremap <C-l> <C-w>l
  xnoremap <C-l> <C-w>l
  nnoremap <C-w>l <C-w>L
  xnoremap <C-w>l <C-w>L
" Misc Functions  -------------------------------------------------------------
  vnoremap J :m '>+1<CR>gv=gv
  vnoremap K :m '<-2<CR>gv=gv
  command! ReloadVimrc :source $MYVIMRC
" function! s:show_position()
"       return ":\<c-u>echo 'start=" . string(getpos("v")) . " end=" . string(getpos(".")) . "'\<cr>gv"
" endfunction
" vmap <expr> ;j s:show_position()
" Leader/Command Functions  ---------------------------------------------------
  nnoremap <cr> :
  map <Space> <leader>
" nnoremap <SPACE> <Nop>
" let mapleader=" "
" General(End) ----------------------------------------------------------------

" Plugin Settings -------------------------------------------------------------
  for f in split(glob('{{ nvim_plugin_config_dir }}/*.vimrc'), '\n')
    exe 'source' f
  endfor
" Plugin Settings(End) --------------------------------------------------------

" Telescope Settings ----------------------------------------------------------
"lua <<EOF
"    require('telescope').load_extension('coc')
"EOF
"  nnoremap <silent> gD :Telescope coc definitions<cr>
"  nnoremap <silent> gd :Telescope coc declarations<cr>
"  nnoremap <silent> gy :Telescope coc type_definitions<cr>
"  nnoremap <silent> gi :Telescope coc implementations<cr>
"  nnoremap <silent> gl :Telescope coc locations<cr>
"  nnoremap <silent> g/ :Telescope coc document_symbols<cr>
"  nnoremap <silent> gS :Telescope coc workspace_symbols<cr>
"  nnoremap <silent> gr :Telescope coc references<cr>
"  nnoremap <silent> gc :Telescope coc commands<cr>
" Telescope Settings(End) -----------------------------------------------------

" Treesitter/Neorg Settings ---------------------------------------------------
lua <<EOF
    local parser_config = require "nvim-treesitter.parsers".get_parser_configs()
    parser_config.norg = {
        install_info = {
            url = "https://github.com/nvim-neorg/tree-sitter-norg",
            files = { "src/parser.c", "src/scanner.cc" },
            branch = "main"
        },
    }

    require'nvim-treesitter.configs'.setup {
      highlight = {
        enable = true,
        disable = {},
      },
      ensure_installed = {
        "norg",
        "haskell",
        "c",
        "cpp",
        "json",
        "yaml",
        "rust"
      },
    }
EOF

lua << EOF
    require('neorg').setup {
        -- Tell Neorg what modules to load
        load = {
            ["core.defaults"] = {}, -- Load all the default modules
            ["core.norg.concealer"] = {}, -- Allows for use of icons
            ["core.norg.dirman"] = { -- Manage your directories with Neorg
                config = {
                    workspaces = {
                        my_workspace = "~/Code"
                    }
                }
            }
        },
    }
EOF
" Treesitter/Neorg Settings(End) ----------------------------------------------

" Neoformat Settings ----------------------------------------------------------
let g:neoformat_enabled_shell = ['shfmt']
let g:neoformat_enabled_yaml = ['prettier']
let g:neoformat_enabled_json = ['prettier']
let g:shfmt_opt="-ci"
" Neoformat Settings(End) -----------------------------------------------------

" FZF Settings ----------------------------------------------------------------
  let g:fzf_preview_use_dev_icons = 1
  let g:fzf_preview_command = '{{ nix_bin }}/bat --color=always --plain {-1}'
  let g:fzf_preview_lines_command = '{{ nix_bin }}/bat --color=always --plain --number'
  let g:fzf_preview_directory_files_command = '{{ nix_bin }}/rg --files --hidden --follow --no-messages -g \!"* *"'
  let g:fzf_preview_filelist_command = '{{ nix_bin }}/rg --files --hidden --follow --no-messages -g \!"* *"'
  let g:fzf_preview_grep_cmd = '{{ nix_bin }}/rg --line-number --no-heading --color=never --hidden'
  set rtp+=~/.fzf
  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

  nmap <Leader>f [fzf-p]
  xmap <Leader>f [fzf-p]
  nnoremap <silent> [fzf-p]f     :<C-u>FzfPreviewProjectFilesRpc<CR>
  nnoremap <silent> [fzf-p]gf    :<C-u>FzfPreviewGitFilesRpc<CR>
  nnoremap <silent> [fzf-p]p     :<C-u>FzfPreviewFromResourcesRpc project_mru git<CR>
  nnoremap <silent> [fzf-p]gs    :<C-u>FzfPreviewGitStatusRpc<CR>
  nnoremap <silent> [fzf-p]ga    :<C-u>FzfPreviewGitActionsRpc<CR>
  nnoremap <silent> [fzf-p]b     :<C-u>FzfPreviewBuffersRpc<CR>
  nnoremap <silent> [fzf-p]B     :<C-u>FzfPreviewAllBuffersRpc<CR>
  nnoremap <silent> [fzf-p]o     :<C-u>FzfPreviewFromResourcesRpc buffer project_mru<CR>
  nnoremap <silent> [fzf-p]<C-o> :<C-u>FzfPreviewJumpsRpc<CR>
  nnoremap <silent> [fzf-p]g;    :<C-u>FzfPreviewChangesRpc<CR>
  nnoremap <silent> [fzf-p]/     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
  nnoremap <silent> [fzf-p]*     :<C-u>FzfPreviewLinesRpc --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
  nnoremap          [fzf-p]gr    :<C-u>FzfPreviewProjectGrepRpc<Space>
  xnoremap          [fzf-p]gr    "sy:FzfPreviewProjectGrepRpc<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
  nnoremap <silent> [fzf-p]t     :<C-u>FzfPreviewBufferTagsRpc<CR>
  nnoremap <silent> [fzf-p]q     :<C-u>FzfPreviewQuickFixRpc<CR>
  nnoremap <silent> [fzf-p]l     :<C-u>FzfPreviewLocationListRpc<CR>


" command! -bang -nargs=? -complete=dir Files
"   \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)
" nnoremap <leader>f :Files<cr>
" nnoremap <leader>b :Buffers<cr>

  function! RipgrepFzf(query, fullscreen)
    let command_fmt = '{{ nix_bin }}/rg --column --line-number --no-heading --color=always --smart-case %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
  endfunction
  command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
  command! -nargs=* -bang RGCWord call RipgrepFzf(expand('<cword>'), <bang>0)
  nnoremap <C-q> :RG<cr>
  nnoremap _ :RGCWord<cr>

  nnoremap : :Commands<cr>

  function! s:fzf_sink(what)
      let p1 = stridx(a:what, '<')
      if p1 >= 0
          let name = strpart(a:what, 0, p1)
          let name = substitute(name, '^\s*\(.\{-}\)\s*$', '\1', '')
          if name != ''
              exec "AsyncTask ". fnameescape(name)
          endif
      endif
  endfunction

  function! s:fzf_task()
      let rows = asynctasks#source(&columns * 48 / 100)
      let source = []
      for row in rows
          let name = row[0]
          let source += [name . '  ' . row[1] . '  : ' . row[2]]
      endfor
      let opts = { 'source': source, 'sink': function('s:fzf_sink'),
                  \ 'options': '+m --nth 1 --inline-info --tac' }
      if exists('g:fzf_layout')
          for key in keys(g:fzf_layout)
              let opts[key] = deepcopy(g:fzf_layout[key])
          endfor
      endif
      call fzf#run(opts)
  endfunction

  command! -nargs=0 AsyncTaskFzf call s:fzf_task()
  nnoremap <leader>t :AsyncTaskFzf<cr>
" FZF Settings(End) -----------------------------------------------------------

" ALE Settings ----------------------------------------------------------------
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
" ALE Settings(End) -----------------------------------------------------------

" Extra Plugin Settings -------------------------------------------------------
" Extra Plugin Settings(End) --------------------------------------------------
