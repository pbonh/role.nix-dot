-- Set Python Path
vim.g.python3_host_prog = '{{ nix_bin }}/nvim-python3'
-- Install packer
local install_path = vim.fn.stdpath 'data' .. '/site/pack/packer/start/packer.nvim'

if vim.fn.empty(vim.fn.glob(install_path)) > 0 then
  vim.fn.execute('!git clone https://github.com/wbthomason/packer.nvim ' .. install_path)
end

vim.cmd [[
  augroup Packer
    autocmd!
    autocmd BufWritePost init.lua PackerCompile
  augroup end
]]

local use = require('packer').use
require('packer').startup(function()
  use 'wbthomason/packer.nvim' -- Package manager
  use 'tpope/vim-fugitive' -- Git commands in nvim
  use 'tpope/vim-rhubarb' -- Fugitive-companion to interact with github
  use 'numToStr/Comment.nvim' -- "gc" to comment visual regions/lines
  -- UI to select things (files, grep results, open buffers...)
  use { 'nvim-telescope/telescope.nvim', requires = { 'nvim-lua/plenary.nvim' } }
  use {'nvim-telescope/telescope-fzf-native.nvim', run = 'make' }
  -- Status/Tab Line
  use {'konapun/vacuumline.nvim', requires = {
      'glepnir/galaxyline.nvim', branch = 'main',
      'kyazdani42/nvim-web-devicons', opt = true
    }
  }
  use {'akinsho/bufferline.nvim', requires = 'kyazdani42/nvim-web-devicons'}
  -- Theme
  -- use 'RRethy/nvim-base16'
  use 'sainnhe/gruvbox-material'
  -- Add indentation guides even on blank lines
  use 'lukas-reineke/indent-blankline.nvim'
  -- Add git related info in the signs columns and popups
  use { 'lewis6991/gitsigns.nvim', requires = { 'nvim-lua/plenary.nvim' } }
  -- Highlight, edit, and navigate code using a fast incremental parsing library
  use 'nvim-treesitter/nvim-treesitter'
  -- Better Highlighting
  use 'kevinhwang91/nvim-hlslens'
  use { 'petertriho/nvim-scrollbar', requires = { 'kevinhwang91/nvim-hlslens' } }
  -- Additional textobjects for treesitter
  use 'nvim-treesitter/nvim-treesitter-textobjects'
  use 'neovim/nvim-lspconfig' -- Collection of configurations for built-in LSP client
  use 'hrsh7th/nvim-cmp' -- Autocompletion plugin
  use 'hrsh7th/cmp-nvim-lsp'
  use 'saadparwaiz1/cmp_luasnip'
  use 'L3MON4D3/LuaSnip' -- Snippets plugin
  -- Cursorline Plugin
  use 'yamatsum/nvim-cursorline'
  -- Motion Plugins
  use 'ggandor/lightspeed.nvim'
  -- Start Screen
  use {
    "startup-nvim/startup.nvim",
    requires = {"nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim"},
    config = function()
      require"startup".setup()
    end
  }
  -- Project Management
  use 'windwp/nvim-projectconfig'
  use 'nvim-telescope/telescope-project.nvim'
  use { 'jvgrootveld/telescope-zoxide',
    requires = {
      'nvim-telescope/telescope.nvim',
      'nvim-lua/plenary.nvim',
      'nvim-lua/popup.nvim'
    }
  }
  -- Keymap Plugins
  use { 'b0o/mapx.nvim', requires = { 'folke/which-key.nvim' } }
  -- Split/Window Management
  use 'sindrets/winshift.nvim'
  -- File Manager Plugin
  use {'is0n/fm-nvim'}
  -- Terminal Plugins
  use { 'voldikss/vim-floaterm',
    requires = {
      'voldikss/fzf-floaterm',
      'junegunn/fzf.vim',
      'junegunn/fzf', run = ':call fzf#install()'
    }
  }
  use 'akinsho/toggleterm.nvim'
  -- Tree Viewer
  use {
    'kyazdani42/nvim-tree.lua',
    requires = {
      'kyazdani42/nvim-web-devicons', -- optional, for file icon
    },
    config = function() require'nvim-tree'.setup {} end
  }
  -- Git Plugins
  use 'kdheepak/lazygit.nvim'
  use { 'sindrets/diffview.nvim', requires = 'nvim-lua/plenary.nvim' }
  -- Task Runner
  use { 'skywind3000/asynctasks.vim',
    requires = { 'skywind3000/asyncrun.vim', 'skywind3000/asyncrun.extra' }
  }
  -- Task Runner
  use { 'GustavoKatel/telescope-asynctasks.nvim',
    requires = {
      'nvim-lua/popup.nvim',
      'nvim-lua/plenary.nvim',
      'nvim-telescope/telescope.nvim',
      'skywind3000/asynctasks.vim',
      'skywind3000/asyncrun.vim',
      'skywind3000/asyncrun.extra'
    }
  }
  -- Neorg/Org Mode
  use { 'nvim-neorg/neorg', requires = { 'nvim-lua/plenary.nvim' } }
  -- Formatter
  use 'sbdchd/neoformat'
  -- Language Server Protocol Providers
{{ lsp_provider_lspconfig_file or "-- No LSP Providers Installed" }}
  -- Language Server Protocol Providers(End)
  -- Debug Adapter Protocol
  use { "rcarriga/nvim-dap-ui", requires = {"mfussenegger/nvim-dap"} }
  -- Debug Adapter Protocol(End)
  -- Language Plugins
{{ language_neovim_plugins_file or "-- No Language Plugins Installed" }}
  -- Language Plugins(End)
end)

-- Set Shell
vim.o.shell = "{{ nvim_shell }}"

-- Set Editor
vim.env.GIT_EDITOR = "{{ nix_bin }}/nvr -cc split --remote-wait +'set bufhidden=wipe'"

-- Cursorline
vim.g.cursorline_timeout = 200

-- Set highlight on search
vim.o.hlsearch = true

-- Set Scrollbar
require("scrollbar").setup()
require("scrollbar.handlers.search").setup()

-- UI Settings
vim.wo.relativenumber = true
vim.wo.number = true
vim.wo.wrap = false

-- Enable mouse mode
vim.o.mouse = 'a'

-- Enable break indent
vim.o.breakindent = true

-- Save undo history
vim.opt.undofile = true

-- Case insensitive searching UNLESS /C or capital in search
vim.o.ignorecase = true
vim.o.smartcase = true

-- Decrease update time
vim.o.updatetime = 250
vim.wo.signcolumn = 'yes'

-- Set colorscheme
vim.opt.termguicolors = true
vim.o.background = "dark" -- or "light" for light mode
vim.cmd([[colorscheme gruvbox-material]])
-- vim.cmd('colorscheme base16-gruvbox-dark-medium')

-- Set completeopt to have a better completion experience
vim.o.completeopt = 'menuone,noselect'

-- Treesitter Settings
require('user_treesitter')

-- Set statusbar
require('user_statusline')

-- Set Tabline
require("bufferline").setup{}

-- Enable Comment.nvim
require('Comment').setup()

-- Highlight on yank
vim.cmd [[
  augroup YankHighlight
    autocmd!
    autocmd TextYankPost * silent! lua vim.highlight.on_yank()
  augroup end
]]

-- Map blankline
vim.g.indent_blankline_char = '┊'
vim.g.indent_blankline_filetype_exclude = { 'help', 'packer' }
vim.g.indent_blankline_buftype_exclude = { 'terminal', 'nofile' }
vim.g.indent_blankline_show_trailing_blankline_indent = false

-- Gitsigns
require('gitsigns').setup {
  signs = {
    add = { text = '+' },
    change = { text = '~' },
    delete = { text = '_' },
    topdelete = { text = '‾' },
    changedelete = { text = '~' },
  },
}

-- Telescope
require('telescope').setup {
  defaults = {
    mappings = {
      i = {
        ['<C-u>'] = false,
        ['<C-d>'] = false,
      },
    },
  },
}

-- Enable telescope fzf native
require('telescope').load_extension 'fzf'

-- LSP settings
require('user_lsp')

-- DAP settings
require('user_dap')

-- luasnip setup
local luasnip = require 'luasnip'

-- nvim-cmp setup
require('user_completion')

-- Startup Settings
require('startup_nvim')

-- Project Settings
require('user_project')

-- WinShift
require("winshift").setup({
  highlight_moving_win = true,  -- Highlight the window being moved
  focused_hl_group = "Visual",  -- The highlight group used for the moving window
  moving_win_options = {
    -- These are local options applied to the moving window while it's
    -- being moved. They are unset when you leave Win-Move mode.
    wrap = false,
    cursorline = false,
    cursorcolumn = false,
    colorcolumn = "",
  },
  -- The window picker is used to select a window while swapping windows with
  -- ':WinShift swap'.
  -- A string of chars used as identifiers by the window picker.
  window_picker_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
  window_picker_ignore = {
    -- This table allows you to indicate to the window picker that a window
    -- should be ignored if its buffer matches any of the following criteria.
    filetype = {  -- List of ignored file types
      "NvimTree",
    },
    buftype = {   -- List of ignored buftypes
      "terminal",
      "quickfix",
    },
    bufname = {   -- List of regex patterns matching ignored buffer names
      [[.*foo/bar/baz\.qux]]
    },
  },
})

-- Task Settings
vim.g.asyncrun_open = 6
vim.g.asynctasks_term_pos = 'toggleterm'
vim.g.asynctasks_term_reuse = 1

-- Project Config Settings
require('nvim-projectconfig').setup({
  project_dir = "{{ nvim_projects_dir }}/",
  autocmd = true
})

-- Ranger/Rnvimr Settings
-- require('user_rnvimr')

-- File Manager Settings
require('user_fm')

-- Terminal Settings
require('user_toggleterm')

-- Neorg Settings
require('user_neorg')

-- Neoformat Settings
require('user_neoformat')

-- Main Keymaps
require('user_keymaps')

-- Last Minute Config

-- vim: ts=2 sts=2 sw=2 et
