-- Set Python Path
vim.g.python3_host_prog = '{{ nix_bin }}/nvim-python3'
-- Install packer
local install_path = vim.fn.stdpath 'data' .. '/site/pack/packer/start/packer.nvim'

if vim.fn.empty(vim.fn.glob(install_path)) > 0 then
  vim.fn.execute('!git clone https://github.com/wbthomason/packer.nvim ' .. install_path)
end

vim.cmd [[
  augroup Packer
    autocmd!
    autocmd BufWritePost init.lua PackerCompile
  augroup end
]]

local use = require('packer').use
require('packer').startup(function()
  -- Packer Plugin Manager
  use 'wbthomason/packer.nvim' -- Package manager
  -- Comments
  use 'numToStr/Comment.nvim' -- "gc" to comment visual regions/lines
  -- Selection UI
  use { 'nvim-telescope/telescope.nvim', requires = { 'nvim-lua/plenary.nvim' } }
  use { 'nvim-telescope/telescope-fzf-native.nvim', run = 'make' }
  -- Status/Tab Line
  use {
    'nvim-lualine/lualine.nvim',
    requires = { 'kyazdani42/nvim-web-devicons' }
  }
  use {
    'kdheepak/tabline.nvim',
    requires = { { 'nvim-lualine/lualine.nvim', opt = true }, { 'kyazdani42/nvim-web-devicons', opt = true } }
  }
  use { 'TC72/telescope-tele-tabby.nvim', requires = 'nvim-telescope/telescope.nvim' }
  -- Theme
  use 'sainnhe/gruvbox-material'
  -- Add indentation guides even on blank lines
  use 'lukas-reineke/indent-blankline.nvim'
  -- Add git related info in the signs columns and popups
  use { 'lewis6991/gitsigns.nvim', requires = { 'nvim-lua/plenary.nvim' } }
  -- Highlight, edit, and navigate code using a fast incremental parsing library
  use { 'nvim-treesitter/nvim-treesitter', run = ':TSUpdate' }
  use 'nvim-treesitter/nvim-treesitter-textobjects'
  -- Better Highlighting
  use 'kevinhwang91/nvim-hlslens'
  use { 'petertriho/nvim-scrollbar', requires = { 'kevinhwang91/nvim-hlslens' } }
  use "IndianBoy42/tree-sitter-just"
  -- LSP Plugins
  Plug 'gfanto/fzf-lsp.nvim'
  --use { 'ray-x/navigator.lua', requires = {
  --  'nvim-treesitter/nvim-treesitter',
  --  'nvim-treesitter/nvim-treesitter-textobjects',
  --  'ray-x/guihua.lua',
  --  run = 'cd lua/fzy && make'
  --}
  --}
  use 'neovim/nvim-lspconfig'
  use 'hrsh7th/nvim-cmp' -- Autocompletion plugin
  use 'hrsh7th/cmp-nvim-lsp'
  use 'saadparwaiz1/cmp_luasnip'
  use 'L3MON4D3/LuaSnip' -- Snippets plugin
  use 'simrat39/symbols-outline.nvim'
  -- Cursorline Plugin
  --use 'yamatsum/nvim-cursorline'
  -- Motion Plugins
  use 'ggandor/lightspeed.nvim'
  use 'tpope/vim-surround'
  use 'tpope/vim-repeat'
  -- Start Screen
  use {
    "startup-nvim/startup.nvim",
    requires = { "nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim" },
    config = function()
      require "startup".setup()
    end
  }
  -- Project Management
  use 'windwp/nvim-projectconfig'
  use 'nvim-telescope/telescope-project.nvim'
  use { 'jvgrootveld/telescope-zoxide',
    requires = {
      'nvim-telescope/telescope.nvim',
      'nvim-lua/plenary.nvim',
      'nvim-lua/popup.nvim'
    }
  }
  -- Keymap Plugins
  use { 'b0o/mapx.nvim', requires = { 'folke/which-key.nvim' } }
  -- Quickfix Plugin
  use { 'kevinhwang91/nvim-bqf' }
  -- Split/Window Management
  use 'sindrets/winshift.nvim'
  use 'mrjones2014/smart-splits.nvim'
  -- File Manager Plugin
  use { 'is0n/fm-nvim' }
  -- Terminal Plugins
  use { 'voldikss/vim-floaterm',
    requires = {
      'voldikss/fzf-floaterm',
      'junegunn/fzf.vim',
      'junegunn/fzf', run = ':call fzf#install()'
    }
  }
  use 'akinsho/toggleterm.nvim'
  use 'numToStr/FTerm.nvim'
  -- Tree Viewer
  use {
    'kyazdani42/nvim-tree.lua',
    requires = {
      'kyazdani42/nvim-web-devicons', -- optional, for file icon
    },
    config = function() require 'nvim-tree'.setup {} end
  }
  -- Git Plugins
  use { 'sindrets/diffview.nvim', requires = 'nvim-lua/plenary.nvim' }
  -- Task Runner
  use { 'skywind3000/asynctasks.vim', requires = 'skywind3000/asyncrun.vim' }
  -- Task Runner
  use { 'GustavoKatel/telescope-asynctasks.nvim',
    requires = {
      'nvim-lua/popup.nvim',
      'nvim-lua/plenary.nvim',
      'nvim-telescope/telescope.nvim',
      'skywind3000/asynctasks.vim',
      'skywind3000/asyncrun.vim',
      'skywind3000/asyncrun.extra'
    }
  }
  -- Neorg/Org Mode
  use { 'nvim-neorg/neorg', requires = {
    'nvim-lua/plenary.nvim',
    'nvim-neorg/neorg-telescope',
  }
  }
      -- Formatter
      --use 'sbdchd/neoformat'
      -- Language Server Protocol Providers
      { { lsp_provider_plugins_file or "-- No LSP Providers Installed" } }
  -- Language Server Protocol Providers(End)
  -- Debug Adapter Protocol
  use { "rcarriga/nvim-dap-ui", requires = { "mfussenegger/nvim-dap" } }
      -- Debug Adapter Protocol(End)
      -- Language Plugins
      { { language_neovim_plugins_file or "-- No Language Plugins Installed" } }
  -- Language Plugins(End)
end)

-- Set Shell
vim.o.shell = "{{ nvim_shell }}"

-- Enable Filetype-specific Settings
vim.cmd [[
  filetype plugin on
  au BufRead,BufNewFile *.lua.j2 set filetype=lua
  au BufRead,BufNewFile *.yaml.j2 set filetype=yaml
  au BufRead,BufNewFile *.yml.j2 set filetype=yaml
]]

-- Set Editor
-- vim.env.GIT_EDITOR = "{{ nix_bin }}/nvr -cc split --remote-wait +'set bufhidden=wipe'"
-- vim.env.EDITOR = "{{ nix_bin }}/nvr -cc split --remote-wait +'set bufhidden=wipe'"

-- Cursorline
-- vim.g.cursorline_timeout = 100
vim.wo.cursorline = true

-- Set highlight on search
vim.o.hlsearch = true

-- Tab/Space Settings
vim.o.autoindent = true
vim.o.expandtab = true
vim.o.shiftwidth = 4
vim.o.smartindent = true
vim.o.softtabstop = 4
vim.o.tabstop = 4

-- Set Scrollbar
require("scrollbar").setup()
require("scrollbar.handlers.search").setup()

-- UI Settings
vim.wo.relativenumber = true
vim.wo.number = true
vim.wo.wrap = false

-- Enable mouse mode
vim.o.mouse = 'a'

-- Enable break indent
vim.o.breakindent = true

-- Save undo history
vim.opt.undofile = true

-- Case insensitive searching UNLESS /C or capital in search
vim.o.ignorecase = true
vim.o.smartcase = true

-- Decrease update time
vim.o.updatetime = 250
vim.wo.signcolumn = 'yes'

-- Set colorscheme
vim.opt.termguicolors = true
vim.o.background = "dark"
vim.cmd([[colorscheme gruvbox-material]])

-- Treesitter Settings
require('user_treesitter')

-- Set statusbar
require('user_statusline')

-- Set Quickfix
require('user_quickfix')

-- Enable Comment.nvim
require('Comment').setup()

-- Highlight on yank
vim.cmd [[
  augroup YankHighlight
    autocmd!
    autocmd TextYankPost * silent! lua vim.highlight.on_yank()
  augroup end
]]

-- Map blankline
vim.g.indent_blankline_char = '┊'
vim.g.indent_blankline_filetype_exclude = { 'help', 'packer' }
vim.g.indent_blankline_buftype_exclude = { 'terminal', 'nofile' }
vim.g.indent_blankline_show_trailing_blankline_indent = false

-- Gitsigns
require('gitsigns').setup {
  signs = {
    add = { text = '+' },
    change = { text = '~' },
    delete = { text = '_' },
    topdelete = { text = '‾' },
    changedelete = { text = '~' },
  },
}

-- Telescope
require('user_telescope')

-- nvim-cmp setup
require('user_completion')

-- LuaSnip setup
require('user_snippet')

-- LSP settings
require('user_lsp')

-- DAP settings
require('user_dap')

-- Startup Settings
require('startup_nvim')

-- Project Settings
require('user_project')

-- WinShift
require('user_window')

-- Task Settings
-- vim.g.asyncrun_open = 6
vim.g.asynctasks_term_pos = 'floaterm_reuse'
vim.g.asynctasks_term_reuse = 1

-- Project Config Settings
require('nvim-projectconfig').setup({
  project_dir = "{{ nvim_projects_dir }}/",
  autocmd = true
})

-- Ranger/Rnvimr Settings
-- require('user_rnvimr')

-- File Manager Settings
require('user_fm')

-- Terminal Settings
require('user_toggleterm')

-- Neorg Settings
require('user_neorg')

-- Neoformat Settings
-- require('user_neoformat')

-- Main Keymaps
require('user_keymaps')

-- User Language Plugin Settings
require('user_languages')

-- Last Minute Config

-- vim: ts=2 sts=2 sw=2 et
